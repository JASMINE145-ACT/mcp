{"version":3,"sources":["../index.ts"],"names":["imageContent","input","rawData","response","readFile","fileTypeFromBuffer","mimeType","MCPError","message","UnexpectedStateError","extras","UserError","TextContentZodSchema","z","ImageContentZodSchema","ContentZodSchema","ContentResultZodSchema","CompletionZodSchema","MCPSessionEventEmitterBase","EventEmitter","MCPSessionEventEmitter","MCPSession","#capabilities","#clientCapabilities","#loggingLevel","#prompts","#resources","#resourceTemplates","#roots","#server","#auth","#pingInterval","#pingTimeout","auth","name","version","tools","resources","resourcesTemplates","prompts","prompt","Server","resource","resourceTemplate","inputResource","inputResourceTemplate","completers","argument","value","inputPrompt","enums","result","Fuse","item","error","retryDelay","maxRetryDelay","consecutiveFailures","pingWithBackoff","isTimeoutError","transport","attempt","capabilities","delay","roots","CompleteRequestSchema","request","RootsListChangedNotificationSchema","SetLevelRequestSchema","ListToolsRequestSchema","tool","zodToJsonSchema","CallToolRequestSchema","McpError","ErrorCode","args","parsed","progressToken","reportProgress","progress","log","context","maybeStringResult","ListResourcesRequestSchema","ReadResourceRequestSchema","uriTemplate","parseURITemplate","match","uri","maybeArrayResult","resourceTemplates","ListResourceTemplatesRequestSchema","ListPromptsRequestSchema","GetPromptRequestSchema","arg","MCPEventEmitterBase","MCPEventEmitter","MCP","options","#options","#authenticate","#resourcesTemplates","#sessions","#sseServer","#tools","StdioServerTransport","session","startSSEServer","host"],"mappings":"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","file":"index.js","sourcesContent":["import { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\nimport {\n  CallToolRequestSchema,\n  type ClientCapabilities,\n  CompleteRequestSchema,\n  CreateMessageRequestSchema,\n  ErrorCode,\n  GetPromptRequestSchema,\n  ListPromptsRequestSchema,\n  ListResourcesRequestSchema,\n  ListResourceTemplatesRequestSchema,\n  ListToolsRequestSchema,\n  McpError,\n  ReadResourceRequestSchema,\n  type Root,\n  RootsListChangedNotificationSchema,\n  type ServerCapabilities,\n  SetLevelRequestSchema,\n} from \"@modelcontextprotocol/sdk/types.js\";\nimport { zodToJsonSchema } from \"zod-to-json-schema\";\nimport { z } from \"zod\";\nimport { setTimeout as delay } from \"node:timers/promises\";\nimport { readFile } from \"fs/promises\";\nimport type { StrictEventEmitter } from \"strict-event-emitter-types\";\nimport { EventEmitter } from \"events\";\nimport Fuse from \"fuse.js\";\nimport type { Transport } from \"@modelcontextprotocol/sdk/shared/transport.js\";\nimport parseURITemplate from \"uri-templates\";\nimport http from \"http\";\n\nexport type SSEServer = {\n  close: () => Promise<void>;\n};\n\ntype MCPEvents<T extends MCPSessionAuth> = {\n  connect: (event: { session: MCPSession<T> }) => void;\n  disconnect: (event: { session: MCPSession<T> }) => void;\n};\n\ntype MCPSessionEvents = {\n  rootsChanged: (event: { roots: Root[] }) => void;\n  error: (event: { error: Error }) => void;\n};\n\n/**\n * Generates an image content object from a URL, file path, or buffer.\n */\nexport const imageContent = async (\n  input: { url: string } | { path: string } | { buffer: Buffer },\n): Promise<ImageContent> => {\n  let rawData: Buffer;\n\n  if (\"url\" in input) {\n    const response = await fetch(input.url);\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch image from URL: ${response.statusText}`);\n    }\n\n    rawData = Buffer.from(await response.arrayBuffer());\n  } else if (\"path\" in input) {\n    rawData = await readFile(input.path);\n  } else if (\"buffer\" in input) {\n    rawData = input.buffer;\n  } else {\n    throw new Error(\n      \"Invalid input: Provide a valid 'url', 'path', or 'buffer'\",\n    );\n  }\n\n  const { fileTypeFromBuffer } = await import('file-type');\n  const mimeType = await fileTypeFromBuffer(rawData);\n\n  const base64Data = rawData.toString(\"base64\");\n\n  return {\n    type: \"image\",\n    data: base64Data,\n    mimeType: mimeType?.mime ?? \"image/png\",\n  } as const;\n};\n\nabstract class MCPError extends Error {\n  public constructor(message?: string) {\n    super(message);\n    this.name = new.target.name;\n  }\n}\n\ntype Extra = unknown;\n\ntype Extras = Record<string, Extra>;\n\nexport class UnexpectedStateError extends MCPError {\n  public extras?: Extras;\n\n  public constructor(message: string, extras?: Extras) {\n    super(message);\n    this.name = new.target.name;\n    this.extras = extras;\n  }\n}\n\n/**\n * An error that is meant to be surfaced to the user.\n */\nexport class UserError extends UnexpectedStateError {}\n\ntype ToolParameters = z.ZodTypeAny;\n\ntype Literal = boolean | null | number | string | undefined;\n\ntype SerializableValue =\n  | Literal\n  | SerializableValue[]\n  | { [key: string]: SerializableValue };\n\ntype Progress = {\n  /**\n   * The progress thus far. This should increase every time progress is made, even if the total is unknown.\n   */\n  progress: number;\n  /**\n   * Total number of items to process (or total progress required), if known.\n   */\n  total?: number;\n};\n\ntype Context<T extends MCPSessionAuth> = {\n  session: T | undefined;\n  reportProgress: (progress: Progress) => Promise<void>;\n  log: {\n    debug: (message: string, data?: SerializableValue) => void;\n    error: (message: string, data?: SerializableValue) => void;\n    info: (message: string, data?: SerializableValue) => void;\n    warn: (message: string, data?: SerializableValue) => void;\n  };\n};\n\ntype TextContent = {\n  type: \"text\";\n  text: string;\n};\n\nconst TextContentZodSchema = z\n  .object({\n    type: z.literal(\"text\"),\n    /**\n     * The text content of the message.\n     */\n    text: z.string(),\n  })\n  .strict() satisfies z.ZodType<TextContent>;\n\ntype ImageContent = {\n  type: \"image\";\n  data: string;\n  mimeType: string;\n};\n\nconst ImageContentZodSchema = z\n  .object({\n    type: z.literal(\"image\"),\n    /**\n     * The base64-encoded image data.\n     */\n    data: z.string().base64(),\n    /**\n     * The MIME type of the image. Different providers may support different image types.\n     */\n    mimeType: z.string(),\n  })\n  .strict() satisfies z.ZodType<ImageContent>;\n\ntype Content = TextContent | ImageContent;\n\nconst ContentZodSchema = z.discriminatedUnion(\"type\", [\n  TextContentZodSchema,\n  ImageContentZodSchema,\n]) satisfies z.ZodType<Content>;\n\ntype ContentResult = {\n  content: Content[];\n  isError?: boolean;\n};\n\nconst ContentResultZodSchema = z\n  .object({\n    content: ContentZodSchema.array(),\n    isError: z.boolean().optional(),\n  })\n  .strict() satisfies z.ZodType<ContentResult>;\n\ntype Completion = {\n  values: string[];\n  total?: number;\n  hasMore?: boolean;\n};\n\n/**\n * https://github.com/modelcontextprotocol/typescript-sdk/blob/3164da64d085ec4e022ae881329eee7b72f208d4/src/types.ts#L983-L1003\n */\nconst CompletionZodSchema = z.object({\n  /**\n   * An array of completion values. Must not exceed 100 items.\n   */\n  values: z.array(z.string()).max(100),\n  /**\n   * The total number of completion options available. This can exceed the number of values actually sent in the response.\n   */\n  total: z.optional(z.number().int()),\n  /**\n   * Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.\n   */\n  hasMore: z.optional(z.boolean()),\n}) satisfies z.ZodType<Completion>;\n\ntype Tool<T extends MCPSessionAuth, Params extends ToolParameters = ToolParameters> = {\n  name: string;\n  description?: string;\n  parameters?: Params;\n  execute: (\n    args: z.infer<Params>,\n    context: Context<T>,\n  ) => Promise<string | ContentResult | TextContent | ImageContent>;\n};\n\ntype ResourceResult =\n  | {\n      text: string;\n    }\n  | {\n      blob: string;\n    };\n\ntype InputResourceTemplateArgument = Readonly<{\n  name: string;\n  description?: string;\n  complete?: ArgumentValueCompleter;\n}>;\n\ntype ResourceTemplateArgument = Readonly<{\n  name: string;\n  description?: string;\n  complete?: ArgumentValueCompleter;\n}>;\n\ntype ResourceTemplate<\n  Arguments extends ResourceTemplateArgument[] = ResourceTemplateArgument[],\n> = {\n  uriTemplate: string;\n  name: string;\n  description?: string;\n  mimeType?: string;\n  arguments: Arguments;\n  complete?: (name: string, value: string) => Promise<Completion>;\n  load: (\n    args: ResourceTemplateArgumentsToObject<Arguments>,\n  ) => Promise<ResourceResult>;\n};\n\ntype ResourceTemplateArgumentsToObject<T extends { name: string }[]> = {\n  [K in T[number][\"name\"]]: string;\n};\n\ntype InputResourceTemplate<\n  Arguments extends ResourceTemplateArgument[] = ResourceTemplateArgument[],\n> = {\n  uriTemplate: string;\n  name: string;\n  description?: string;\n  mimeType?: string;\n  arguments: Arguments;\n  load: (\n    args: ResourceTemplateArgumentsToObject<Arguments>,\n  ) => Promise<ResourceResult>;\n};\n\ntype Resource = {\n  uri: string;\n  name: string;\n  description?: string;\n  mimeType?: string;\n  load: () => Promise<ResourceResult | ResourceResult[]>;\n  complete?: (name: string, value: string) => Promise<Completion>;\n};\n\ntype ArgumentValueCompleter = (value: string) => Promise<Completion>;\n\ntype InputPromptArgument = Readonly<{\n  name: string;\n  description?: string;\n  required?: boolean;\n  complete?: ArgumentValueCompleter;\n  enum?: string[];\n}>;\n\ntype PromptArgumentsToObject<T extends { name: string; required?: boolean }[]> =\n  {\n    [K in T[number][\"name\"]]: Extract<\n      T[number],\n      { name: K }\n    >[\"required\"] extends true\n      ? string\n      : string | undefined;\n  };\n\ntype InputPrompt<\n  Arguments extends InputPromptArgument[] = InputPromptArgument[],\n  Args = PromptArgumentsToObject<Arguments>,\n> = {\n  name: string;\n  description?: string;\n  arguments?: InputPromptArgument[];\n  load: (args: Args) => Promise<string>;\n};\n\ntype PromptArgument = Readonly<{\n  name: string;\n  description?: string;\n  required?: boolean;\n  complete?: ArgumentValueCompleter;\n  enum?: string[];\n}>;\n\ntype Prompt<\n  Arguments extends PromptArgument[] = PromptArgument[],\n  Args = PromptArgumentsToObject<Arguments>,\n> = {\n  arguments?: PromptArgument[];\n  complete?: (name: string, value: string) => Promise<Completion>;\n  description?: string;\n  load: (args: Args) => Promise<string>;\n  name: string;\n};\n\ntype ServerOptions<T extends MCPSessionAuth> = {\n  name: string;\n  version: `${number}.${number}.${number}`;\n  authenticate?: Authenticate<T>;\n};\n\ntype LoggingLevel =\n  | \"debug\"\n  | \"info\"\n  | \"notice\"\n  | \"warning\"\n  | \"error\"\n  | \"critical\"\n  | \"alert\"\n  | \"emergency\";\n\nconst MCPSessionEventEmitterBase: {\n  new (): StrictEventEmitter<EventEmitter, MCPSessionEvents>;\n} = EventEmitter;\n\nclass MCPSessionEventEmitter extends MCPSessionEventEmitterBase {}\n\ntype SamplingResponse = {\n  model: string;\n  stopReason?: \"endTurn\" | \"stopSequence\" | \"maxTokens\" | string;\n  role: \"user\" | \"assistant\";\n  content: TextContent | ImageContent;\n};\n\ntype MCPSessionAuth = Record<string, unknown> | undefined;\n\nexport class MCPSession<T extends MCPSessionAuth = MCPSessionAuth> extends MCPSessionEventEmitter {\n  #capabilities: ServerCapabilities = {};\n  #clientCapabilities?: ClientCapabilities;\n  #loggingLevel: LoggingLevel = \"info\";\n  #prompts: Prompt[] = [];\n  #resources: Resource[] = [];\n  #resourceTemplates: ResourceTemplate[] = [];\n  #roots: Root[] = [];\n  #server: Server;\n  #auth: T | undefined;\n  #pingInterval: ReturnType<typeof setInterval> | null = null;\n  #pingTimeout: NodeJS.Timer | null = null;\n\n  constructor({\n    auth,\n    name,\n    version,\n    tools,\n    resources,\n    resourcesTemplates,\n    prompts,\n  }: {\n    auth?: T;\n    name: string;\n    version: string;\n    tools: Tool<T>[];\n    resources: Resource[];\n    resourcesTemplates: InputResourceTemplate[];\n    prompts: Prompt[];\n  }) {\n    super();\n\n    this.#auth = auth;\n\n    if (tools.length) {\n      this.#capabilities.tools = {};\n    }\n\n    if (resources.length || resourcesTemplates.length) {\n      this.#capabilities.resources = {};\n    }\n\n    if (prompts.length) {\n      for (const prompt of prompts) {\n        this.addPrompt(prompt);\n      }\n\n      this.#capabilities.prompts = {};\n    }\n\n    this.#capabilities.logging = {};\n\n    this.#server = new Server(\n      { name: name, version: version },\n      { capabilities: this.#capabilities },\n    );\n\n    this.setupErrorHandling();\n    this.setupLoggingHandlers();\n    this.setupRootsHandlers();\n    this.setupCompleteHandlers();\n\n    if (tools.length) {\n      this.setupToolHandlers(tools);\n    }\n\n    if (resources.length || resourcesTemplates.length) {\n      for (const resource of resources) {\n        this.addResource(resource);\n      }\n\n      this.setupResourceHandlers(resources);\n\n      if (resourcesTemplates.length) {\n        for (const resourceTemplate of resourcesTemplates) {\n          this.addResourceTemplate(resourceTemplate);\n        }\n\n        this.setupResourceTemplateHandlers(resourcesTemplates);\n      }\n    }\n\n    if (prompts.length) {\n      this.setupPromptHandlers(prompts);\n    }\n  }\n\n  private addResource(inputResource: Resource) {\n    this.#resources.push(inputResource);\n  }\n\n  private addResourceTemplate(inputResourceTemplate: InputResourceTemplate) {\n    const completers: Record<string, ArgumentValueCompleter> = {};\n\n    for (const argument of inputResourceTemplate.arguments ?? []) {\n      if (argument.complete) {\n        completers[argument.name] = argument.complete;\n      }\n    }\n\n    const resourceTemplate = {\n      ...inputResourceTemplate,\n      complete: async (name: string, value: string) => {\n        if (completers[name]) {\n          return await completers[name](value);\n        }\n\n        return {\n          values: [],\n        };\n      },\n    };\n\n    this.#resourceTemplates.push(resourceTemplate);\n  }\n\n  private addPrompt(inputPrompt: InputPrompt) {\n    const completers: Record<string, ArgumentValueCompleter> = {};\n    const enums: Record<string, string[]> = {};\n\n    for (const argument of inputPrompt.arguments ?? []) {\n      if (argument.complete) {\n        completers[argument.name] = argument.complete;\n      }\n\n      if (argument.enum) {\n        enums[argument.name] = argument.enum;\n      }\n    }\n\n    const prompt = {\n      ...inputPrompt,\n      complete: async (name: string, value: string) => {\n        if (completers[name]) {\n          return await completers[name](value);\n        }\n\n        if (enums[name]) {\n          const fuse = new Fuse(enums[name], {\n            keys: [\"value\"],\n          });\n\n          const result = fuse.search(value);\n\n          return {\n            values: result.map((item) => item.item),\n            total: result.length,\n          };\n        }\n\n        return {\n          values: [],\n        };\n      },\n    };\n\n    this.#prompts.push(prompt);\n  }\n\n  public get clientCapabilities(): ClientCapabilities | null {\n    return this.#clientCapabilities ?? null;\n  }\n\n  public get server(): Server {\n    return this.#server;\n  }\n\n  private setupErrorHandling() {\n    this.#server.onerror = (error) => {\n      console.error(\"[MCP Error]\", error);\n    };\n  }\n\n  private setupPingWithBackoff() {\n    let retryDelay = 1000;\n    const maxRetryDelay = 30000;\n    let consecutiveFailures = 0;\n\n    const pingWithBackoff = async () => {\n      try {\n        await this.#server.ping();\n        retryDelay = 1000;\n        consecutiveFailures = 0;\n      } catch (error) {\n        consecutiveFailures++;\n        \n        // Determine if this is a transport error or protocol error\n        const isTimeoutError = error instanceof Error && \n          (error.message.includes('timeout') || \n           (error as any).code === -32001);\n        \n        const isMethodNotFoundError = error instanceof Error &&\n          ((error as any).code === -32601);\n        \n        if (isMethodNotFoundError) {\n          // Method not found errors should be largely ignored during ping\n          console.warn(`[MCP Ping] Method not found during ping - this is usually not critical`);\n        } else if (isTimeoutError) {\n          console.warn(`[MCP Ping] Timeout detected (attempt ${consecutiveFailures}), applying backoff`);\n          retryDelay = Math.min(retryDelay * 1.5, maxRetryDelay);\n        } else {\n          console.error(`[MCP Ping] Error during ping:`, error);\n          this.emit(\"error\", {\n            error: error as Error,\n          });\n        }\n      }\n      \n      // Always schedule next ping regardless of error to maintain connection\n      this.#pingTimeout = setTimeout(pingWithBackoff, retryDelay);\n    };\n\n    this.#pingTimeout = setTimeout(pingWithBackoff, retryDelay);\n  }\n\n  public async requestSampling(\n    message: z.infer<typeof CreateMessageRequestSchema>[\"params\"],\n  ): Promise<SamplingResponse> {\n    return this.#server.createMessage(message);\n  }\n\n  public async connect(transport: Transport) {\n    if (this.#server.transport) {\n      throw new UnexpectedStateError(\"Server is already connected\");\n    }\n\n    try {\n      await this.#server.connect(transport);\n\n      let attempt = 0;\n\n      while (attempt++ < 10) {\n        try {\n          const capabilities = await this.#server.getClientCapabilities();\n\n          if (capabilities) {\n            this.#clientCapabilities = capabilities;\n            break;\n          }\n        } catch (error) {\n          if (attempt >= 10) {\n            console.warn('[warning] Failed to get client capabilities', error);\n          }\n        }\n        await delay(100);\n      }\n\n      if (!this.#clientCapabilities) {\n        console.warn('[warning] MCP could not infer client capabilities');\n      }\n\n      if (this.#clientCapabilities?.roots) {\n        try {\n          const roots = await this.#server.listRoots();\n          this.#roots = roots.roots;\n        } catch (error) {\n          console.warn('[warning] Failed to list roots', error);\n        }\n      }\n\n      if (this.#pingInterval) {\n        clearInterval(this.#pingInterval);\n        this.#pingInterval = null;\n      }\n      this.setupPingWithBackoff();\n    } catch (error) {\n      console.error('[error] Failed to connect to MCP server', error);\n      throw error;\n    }\n  }\n\n  public get roots(): Root[] {\n    return this.#roots;\n  }\n\n  public async close() {\n    if (this.#pingInterval) {\n      clearInterval(this.#pingInterval);\n      this.#pingInterval = null;\n    }\n    \n    if (this.#pingTimeout) {\n      clearTimeout(this.#pingTimeout);\n      this.#pingTimeout = null;\n    }\n\n    try {\n      await this.#server.close();\n    } catch (error) {\n      console.error(\"[MCP Error]\", \"could not close server\", error);\n    }\n  }\n\n  public get loggingLevel(): LoggingLevel {\n    return this.#loggingLevel;\n  }\n\n  private setupCompleteHandlers() {\n    this.#server.setRequestHandler(CompleteRequestSchema, async (request) => {\n      if (request.params.ref.type === \"ref/prompt\") {\n        const prompt = this.#prompts.find(\n          (prompt) => prompt.name === request.params.ref.name,\n        );\n\n        if (!prompt) {\n          throw new UnexpectedStateError(\"Unknown prompt\", {\n            request,\n          });\n        }\n\n        if (!prompt.complete) {\n          throw new UnexpectedStateError(\"Prompt does not support completion\", {\n            request,\n          });\n        }\n\n        const completion = CompletionZodSchema.parse(\n          await prompt.complete(\n            request.params.argument.name,\n            request.params.argument.value,\n          ),\n        );\n\n        return {\n          completion,\n        };\n      }\n\n      if (request.params.ref.type === \"ref/resource\") {\n        const resource = this.#resourceTemplates.find(\n          (resource) => resource.uriTemplate === request.params.ref.uri,\n        );\n\n        if (!resource) {\n          throw new UnexpectedStateError(\"Unknown resource\", {\n            request,\n          });\n        }\n\n        if (!(\"uriTemplate\" in resource)) {\n          throw new UnexpectedStateError(\"Unexpected resource\");\n        }\n\n        if (!resource.complete) {\n          throw new UnexpectedStateError(\n            \"Resource does not support completion\",\n            {\n              request,\n            },\n          );\n        }\n\n        const completion = CompletionZodSchema.parse(\n          await resource.complete(\n            request.params.argument.name,\n            request.params.argument.value,\n          ),\n        );\n\n        return {\n          completion,\n        };\n      }\n\n      throw new UnexpectedStateError(\"Unexpected completion request\", {\n        request,\n      });\n    });\n  }\n\n  private setupRootsHandlers() {\n    this.#server.setNotificationHandler(\n      RootsListChangedNotificationSchema,\n      () => {\n        this.#server.listRoots().then((roots) => {\n          this.#roots = roots.roots;\n\n          this.emit(\"rootsChanged\", {\n            roots: roots.roots,\n          });\n        });\n      },\n    );\n  }\n\n  private setupLoggingHandlers() {\n    this.#server.setRequestHandler(SetLevelRequestSchema, (request) => {\n      this.#loggingLevel = request.params.level;\n\n      return {};\n    });\n  }\n\n  private setupToolHandlers(tools: Tool<T>[]) {\n    this.#server.setRequestHandler(ListToolsRequestSchema, async () => {\n      return {\n        tools: tools.map((tool) => {\n          return {\n            name: tool.name,\n            description: tool.description,\n            inputSchema: tool.parameters\n              ? zodToJsonSchema(tool.parameters)\n              : undefined,\n          };\n        }),\n      };\n    });\n\n    this.#server.setRequestHandler(CallToolRequestSchema, async (request) => {\n      const tool = tools.find((tool) => tool.name === request.params.name);\n\n      if (!tool) {\n        throw new McpError(\n          ErrorCode.MethodNotFound,\n          `Unknown tool: ${request.params.name}`,\n        );\n      }\n\n      let args: any = undefined;\n\n      if (tool.parameters) {\n        const parsed = tool.parameters.safeParse(request.params.arguments);\n\n        if (!parsed.success) {\n          throw new McpError(\n            ErrorCode.InvalidParams,\n            `Invalid ${request.params.name} parameters`,\n          );\n        }\n\n        args = parsed.data;\n      }\n\n      const progressToken = request.params?._meta?.progressToken;\n\n      let result: ContentResult;\n\n      try {\n        const reportProgress = async (progress: Progress) => {\n          await this.#server.notification({\n            method: \"notifications/progress\",\n            params: {\n              ...progress,\n              progressToken,\n            },\n          });\n        };\n\n        const log = {\n          debug: (message: string, context?: SerializableValue) => {\n            this.#server.sendLoggingMessage({\n              level: \"debug\",\n              data: {\n                message,\n                context,\n              },\n            });\n          },\n          error: (message: string, context?: SerializableValue) => {\n            this.#server.sendLoggingMessage({\n              level: \"error\",\n              data: {\n                message,\n                context,\n              },\n            });\n          },\n          info: (message: string, context?: SerializableValue) => {\n            this.#server.sendLoggingMessage({\n              level: \"info\",\n              data: {\n                message,\n                context,\n              },\n            });\n          },\n          warn: (message: string, context?: SerializableValue) => {\n            this.#server.sendLoggingMessage({\n              level: \"warning\",\n              data: {\n                message,\n                context,\n              },\n            });\n          },\n        };\n\n        const maybeStringResult = await tool.execute(args, {\n          reportProgress,\n          log,\n          session: this.#auth,\n        });\n\n        if (typeof maybeStringResult === \"string\") {\n          result = ContentResultZodSchema.parse({\n            content: [{ type: \"text\", text: maybeStringResult }],\n          });\n        } else if (\"type\" in maybeStringResult) {\n          result = ContentResultZodSchema.parse({\n            content: [maybeStringResult],\n          });\n        } else {\n          result = ContentResultZodSchema.parse(maybeStringResult);\n        }\n      } catch (error) {\n        if (error instanceof UserError) {\n          return {\n            content: [{ type: \"text\", text: error.message }],\n            isError: true,\n          };\n        }\n\n        return {\n          content: [{ type: \"text\", text: `Error: ${error}` }],\n          isError: true,\n        };\n      }\n\n      return result;\n    });\n  }\n\n  private setupResourceHandlers(resources: Resource[]) {\n    this.#server.setRequestHandler(ListResourcesRequestSchema, async () => {\n      return {\n        resources: resources.map((resource) => {\n          return {\n            uri: resource.uri,\n            name: resource.name,\n            mimeType: resource.mimeType,\n          };\n        }),\n      };\n    });\n\n    this.#server.setRequestHandler(\n      ReadResourceRequestSchema,\n      async (request) => {\n        if (\"uri\" in request.params) {\n          const resource = resources.find(\n            (resource) =>\n              \"uri\" in resource && resource.uri === request.params.uri,\n          );\n\n          if (!resource) {\n            for (const resourceTemplate of this.#resourceTemplates) {\n              const uriTemplate = parseURITemplate(\n                resourceTemplate.uriTemplate,\n              );\n\n              const match = uriTemplate.fromUri(request.params.uri);\n\n              if (!match) {\n                continue;\n              }\n\n              const uri = uriTemplate.fill(match);\n\n              const result = await resourceTemplate.load(match);\n\n              return {\n                contents: [\n                  {\n                    uri: uri,\n                    mimeType: resourceTemplate.mimeType,\n                    name: resourceTemplate.name,\n                    ...result,\n                  },\n                ],\n              };\n            }\n\n            throw new McpError(\n              ErrorCode.MethodNotFound,\n              `Unknown resource: ${request.params.uri}`,\n            );\n          }\n\n          if (!(\"uri\" in resource)) {\n            throw new UnexpectedStateError(\"Resource does not support reading\");\n          }\n\n          let maybeArrayResult: Awaited<ReturnType<Resource[\"load\"]>>;\n\n          try {\n            maybeArrayResult = await resource.load();\n          } catch (error) {\n            throw new McpError(\n              ErrorCode.InternalError,\n              `Error reading resource: ${error}`,\n              {\n                uri: resource.uri,\n              },\n            );\n          }\n\n          if (Array.isArray(maybeArrayResult)) {\n            return {\n              contents: maybeArrayResult.map((result) => ({\n                uri: resource.uri,\n                mimeType: resource.mimeType,\n                name: resource.name,\n                ...result,\n              })),\n            };\n          } else {\n            return {\n              contents: [\n                {\n                  uri: resource.uri,\n                  mimeType: resource.mimeType,\n                  name: resource.name,\n                  ...maybeArrayResult,\n                },\n              ],\n            };\n          }\n        }\n\n        throw new UnexpectedStateError(\"Unknown resource request\", {\n          request,\n        });\n      },\n    );\n  }\n\n  private setupResourceTemplateHandlers(resourceTemplates: ResourceTemplate[]) {\n    this.#server.setRequestHandler(\n      ListResourceTemplatesRequestSchema,\n      async () => {\n        return {\n          resourceTemplates: resourceTemplates.map((resourceTemplate) => {\n            return {\n              name: resourceTemplate.name,\n              uriTemplate: resourceTemplate.uriTemplate,\n            };\n          }),\n        };\n      },\n    );\n  }\n\n  private setupPromptHandlers(prompts: Prompt[]) {\n    this.#server.setRequestHandler(ListPromptsRequestSchema, async () => {\n      return {\n        prompts: prompts.map((prompt) => {\n          return {\n            name: prompt.name,\n            description: prompt.description,\n            arguments: prompt.arguments,\n            complete: prompt.complete,\n          };\n        }),\n      };\n    });\n\n    this.#server.setRequestHandler(GetPromptRequestSchema, async (request) => {\n      const prompt = prompts.find(\n        (prompt) => prompt.name === request.params.name,\n      );\n\n      if (!prompt) {\n        throw new McpError(\n          ErrorCode.MethodNotFound,\n          `Unknown prompt: ${request.params.name}`,\n        );\n      }\n\n      const args = request.params.arguments;\n\n      for (const arg of prompt.arguments ?? []) {\n        if (arg.required && !(args && arg.name in args)) {\n          throw new McpError(\n            ErrorCode.InvalidRequest,\n            `Missing required argument: ${arg.name}`,\n          );\n        }\n      }\n\n      let result: Awaited<ReturnType<Prompt[\"load\"]>>;\n\n      try {\n        result = await prompt.load(args as Record<string, string | undefined>);\n      } catch (error) {\n        throw new McpError(\n          ErrorCode.InternalError,\n          `Error loading prompt: ${error}`,\n        );\n      }\n\n      return {\n        description: prompt.description,\n        messages: [\n          {\n            role: \"user\",\n            content: { type: \"text\", text: result },\n          },\n        ],\n      };\n    });\n  }\n}\n\nconst MCPEventEmitterBase: {\n  new (): StrictEventEmitter<EventEmitter, MCPEvents<MCPSessionAuth>>;\n} = EventEmitter;\n\nclass MCPEventEmitter extends MCPEventEmitterBase {}\n\ntype Authenticate<T> = (request: http.IncomingMessage) => Promise<T>;\n\nexport class MCP<T extends Record<string, unknown> | undefined = undefined> extends MCPEventEmitter {\n  #options: ServerOptions<T>;\n  #prompts: InputPrompt[] = [];\n  #resources: Resource[] = [];\n  #resourcesTemplates: InputResourceTemplate[] = [];\n  #sessions: MCPSession<T>[] = [];\n  #sseServer: SSEServer | null = null;\n  #tools: Tool<T>[] = [];\n  #authenticate: Authenticate<T> | undefined;\n\n  constructor(public options: ServerOptions<T>) {\n    super();\n\n    this.#options = options;\n    this.#authenticate = options.authenticate;\n  }\n\n  public get sessions(): MCPSession<T>[] {\n    return this.#sessions;\n  }\n\n  /**\n   * Adds a tool to the server.\n   */\n  public addTool<Params extends ToolParameters>(tool: Tool<T, Params>) {\n    this.#tools.push(tool as unknown as Tool<T>);\n  }\n\n  /**\n   * Adds a resource to the server.\n   */\n  public addResource(resource: Resource) {\n    this.#resources.push(resource);\n  }\n\n  /**\n   * Adds a resource template to the server.\n   */\n  public addResourceTemplate<\n    const Args extends InputResourceTemplateArgument[],\n  >(resource: InputResourceTemplate<Args>) {\n    this.#resourcesTemplates.push(resource);\n  }\n\n  /**\n   * Adds a prompt to the server.\n   */\n  public addPrompt<const Args extends InputPromptArgument[]>(\n    prompt: InputPrompt<Args>,\n  ) {\n    this.#prompts.push(prompt);\n  }\n\n  /**\n   * Starts the server.\n   */\n  public async start(\n    options:\n      | { transportType: \"stdio\" }\n      | {\n          transportType: \"sse\";\n          sse: { endpoint: `/${string}`; port: number; host?: string };\n        } = {\n      transportType: \"stdio\",\n    },\n  ) {\n    if (options.transportType === \"stdio\") {\n      const transport = new StdioServerTransport();\n\n      const session = new MCPSession<T>({\n        name: this.#options.name,\n        version: this.#options.version,\n        tools: this.#tools,\n        resources: this.#resources,\n        resourcesTemplates: this.#resourcesTemplates,\n        prompts: this.#prompts,\n      });\n\n      await session.connect(transport);\n\n      this.#sessions.push(session);\n\n      this.emit(\"connect\", {\n        session,\n      });\n\n    } else if (options.transportType === \"sse\") {\n      const { startSSEServer } = await import(\"mcp-proxy\");\n      this.#sseServer = await startSSEServer<MCPSession<T>>({\n        endpoint: options.sse.endpoint as `/${string}`,\n        port: options.sse.port,\n        createServer: async (request) => {\n          try {\n            let auth: T | undefined;\n\n            if (this.#authenticate) {\n              auth = await this.#authenticate(request);\n            }\n\n            const session = new MCPSession<T>({\n              auth,\n              name: this.#options.name,\n              version: this.#options.version,\n              tools: this.#tools,\n              resources: this.#resources,\n              resourcesTemplates: this.#resourcesTemplates,\n              prompts: this.#prompts,\n            });\n            \n            return session;\n          } catch (error) {\n            console.error(\"Error creating MCP session:\", error);\n            throw error;\n          }\n        },\n        onClose: (session) => {\n          try {\n            this.emit(\"disconnect\", {\n              session,\n            });\n          } catch (error) {\n            console.error(\"Error during session disconnect:\", error);\n          }\n        },\n        onConnect: async (session) => {\n          try {\n            this.#sessions.push(session);\n\n            this.emit(\"connect\", {\n              session,\n            });\n          } catch (error) {\n            console.error(\"Error during session connect:\", error);\n          }\n        },\n      });\n\n      // The host parameter is only used for displaying the server URL\n      // The actual server binds to all interfaces (::)\n      const host = options.sse.host || 'localhost';\n      console.info(\n        `server is running on SSE at http://${host}:${options.sse.port}${options.sse.endpoint}`,\n      );\n    } else {\n      throw new Error(\"Invalid transport type\");\n    }\n  }\n\n  /**\n   * Stops the server.\n   */\n  public async stop() {\n    if (this.#sseServer) {\n      this.#sseServer.close();\n    }\n  }\n}\n\nexport type { Context };\nexport type { Tool, ToolParameters };\nexport type { Content, TextContent, ImageContent, ContentResult };\nexport type { Progress, SerializableValue };\nexport type { Resource, ResourceResult };\nexport type { ResourceTemplate, ResourceTemplateArgument };\nexport type { Prompt, PromptArgument };\nexport type { InputPrompt, InputPromptArgument };\nexport type { ServerOptions, LoggingLevel };\nexport type { MCPEvents, MCPSessionEvents };"]}